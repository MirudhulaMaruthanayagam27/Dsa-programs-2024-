// Corrected version for all 8 questions:

// 1. Multiply two numbers recursively
public class MultiplyNumbers {
    public static int mul(int a, int b) {
        if (b == 0) {
            return 0;
        }
        return a + mul(a, b - 1);
    }

    public static void main(String[] args) {
        int result = mul(5, 3);
        System.out.println("Multiplication result: " + result);
    }
}




// 2. Find power of a number recursively
public class PowerCalculation {
    public static int pow(int a, int b) {
        if (b == 0) {
            return 1;
        }
        return a * pow(a, b - 1);
    }

    public static void main(String[] args) {
        int result = pow(2, 3);
        System.out.println("Power result: " + result);
    }
}



// 3. Find factorial of a number recursively
public class FactorialCalculation {
    public static int fact(int num) {
        if (num <= 1) {
            return 1;
        }
        return num * fact(num - 1);
    }

    public static void main(String[] args) {
        int result = fact(5);
        System.out.println("Factorial result: " + result);
    }
}



// 4. Find Fibonacci of a number recursively
public class FibonacciSeries {
    public static int fib(int x) {
        if (x == 0) {
            return 0;
        } else if (x == 1) {
            return 1;
        }
        return fib(x - 1) + fib(x - 2);
    }

    public static void main(String[] args) {
        int result = fib(5);
        System.out.println("Fibonacci result: " + result);
    }
}



// 5. Find sum of array elements recursively
public class ArraySum {
    public static int sum(int si, int ei, int[] arr) {
        if (si > ei) {
            return 0;
        }
        return arr[si] + sum(si + 1, ei, arr);
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int result = sum(0, arr.length - 1, arr);
        System.out.println("Sum of array: " + result);
    }
}



// 6. Find ways to climb stairs
public class ClimbStairs {
    public static int climbStairs(int n) {
        if (n == 0) {
            return 1;
        } else if (n < 0) {
            return 0;
        }
        return climbStairs(n - 1) + climbStairs(n - 2);
    }

    public static void main(String[] args) {
        int result = climbStairs(4);
        System.out.println("Ways to climb stairs: " + result);
    }
}



// 7. Find ways from source to destination in a matrix
public class MatrixPaths {
    public static int mp(int sr, int sc, int dr, int dc) {
        if (sr > dr || sc > dc) {
            return 0;
        } else if (sr == dr && sc == dc) {
            return 1;
        }
        return mp(sr + 1, sc, dr, dc) + mp(sr, sc + 1, dr, dc);
    }

    public static void main(String[] args) {
        int result = mp(0, 0, 2, 2);
        System.out.println("Matrix paths: " + result);
    }
}



// 8. Print subsequences of a string
public class SubsequencePrinter {
    public static void printSS(String ques, String ans) {
        if (ques.length() == 0) {
            System.out.println(ans);
            return;
        }
        char ch = ques.charAt(0);
        String ros = ques.substring(1);
        printSS(ros, ans);
        printSS(ros, ans + ch);
    }

    public static void main(String[] args) {
        printSS("abc", "");
    }
}
